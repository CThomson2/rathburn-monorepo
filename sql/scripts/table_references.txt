./web/src/app/(routes)/scheduling/page.tsx:    .from("drums")
./web/src/app/(routes)/scheduling/page.tsx:    .from("distillation_schedule")
./web/src/app/(routes)/scheduling/page.tsx:    .from("distillation_pending_assignment")
./web/src/app/(routes)/drums/manage/page.tsx:const mockDrums = Array.from({ length: 20 }).map((_, i) => ({
./web/src/app/(routes)/drums/manage/page.tsx:      //   .from('drum_stock')
./web/src/app/(routes)/drums/manage/page.tsx:                  {Array.from({ length: Math.min(5, totalPages) }).map(
./web/src/app/(routes)/drums/page.tsx:        .from("stock_new")
./web/src/app/(routes)/drums/page.tsx:        .from("stock_repro")
./web/src/app/api/drum-assignment/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/route.ts:      .from("drums")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/[id]/route.ts:        .from("drums")
./web/src/app/api/drum-assignment/[id]/route.ts:        .from("drums")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("distillation_pending_assignment")
./web/src/app/api/drum-assignment/[id]/route.ts:      .from("drums")
./web/src/app/api/drums/count/route.ts:      .from("drums")
./web/src/app/api/barcodes/scan/drum/route.ts:      .from("stock_drum")
./web/src/app/api/barcodes/scan/drum/route.ts:        .from("stock_drum")
./web/src/app/api/barcodes/scan/drum/route.ts:            .from("stock_drum")
./web/src/app/api/barcodes/scan/drum/route.ts:            .from("stock_drum")
./web/src/app/api/barcodes/scan/drum/route.ts:            .from("stock_drum")
./web/src/app/api/barcodes/scan/drum/route.ts:              .from("stock_drum")
./web/src/app/api/barcodes/scan/processor.ts:    .from("stock_drum")
./web/src/app/api/barcodes/initial-stock/route.ts:    let query = supabase.from("drums").select("*");
./web/src/app/api/barcodes/stock-drums/[order-detail-id]/route.ts:        .from("order_detail")
./web/src/app/api/barcodes/stock-drums/[order-detail-id]/route.ts:        .from("stock_order")
./web/src/app/api/barcodes/stock-drums/[order-detail-id]/route.ts:        .from("ref_materials")
./web/src/app/api/barcodes/stock-drums/[order-detail-id]/route.ts:        .from("stock_drum")
./web/src/app/api/orders/update/route.ts:  //     return await client.from("stock_order").update(data).eq("order_id", id);
./web/src/app/api/orders/route.ts:        .from("stock_order")
./web/src/app/api/orders/route.ts:          .from("order_detail")
./web/src/app/api/orders/route.ts:          .from("stock_drum")
./web/src/app/api/orders/next-po-number/route.ts:        .from('stock_order')
./web/src/features/activity/components/NotificationsPanel.tsx:          .from("notification")
./web/src/features/activity/components/CreateNotification.tsx:      const { error } = await supabase.from("notification").insert({
./web/src/features/inventory/drum-stock/data-utils.ts:      .from("stock_drum")
./web/src/lib/supabase/client.ts: *   return await supabase.from("drums").select("*");
