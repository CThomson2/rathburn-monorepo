---
description: 
globs: 
alwaysApply: false
---
## 1. **Clarify Feature Scope & Requirements**
- **Define the purpose**: What will this page or feature accomplish for your users?  
- **Identify must-have vs. nice-to-have** elements: e.g., do you really need all 20 tables in the first pass, or just 3?

> **Outcome**: A short, clear description of the feature, including any business rules or “must-do” items.

---

## 2. **Plan the Data Flow & Architecture**
- **Sketch the flow**: How does data move from the database to your UI and back?  
  - Which queries will you run?  
  - Will you use Next.js SSR, client-side fetches, server actions, or an API route—and for which parts?  
- **Identify any tricky points**: Will you need row-level security? Are there foreign-key or join complexities? Are you returning multiple related tables in one view?

> **Outcome**: A rough plan for your backend strategy:  
- Which DB tables or views you’ll use.  
- How data is fetched and updated (server actions, API routes, direct SSR, etc.).  
- A sense of where your logic or special validations will live (database triggers/functions vs. application layer).

---

## 3. **Set Up or Update the Database Schema & Views**
- **Create (or refine) the core tables** or **views** needed to power your feature.  
  - In your example, you picked 3 sample tables/views rather than all 20 to avoid scope bloat.  
- **Write or modify any required triggers, constraints, or SQL functions**.  
  - E.g., a trigger that logs every update for auditing, or a function that merges multiple tables into a single user-friendly view.

> **Outcome**: A working DB layer (with minimal but functional tables/views) that can support the feature in a “proof of concept” style.

---

## 4. **Implement Basic Backend Logic (API/Server Actions)**
1. **Server Actions / API Routes**:  
   - Create endpoints or server action methods that handle CRUD.  
   - Decide which flows happen via server actions vs. which happen in your client (or SSR).
2. **Testing Without UI**:  
   - Use cURL, Postman, or simple scripts to confirm the new endpoints actually fetch/update the correct data.  
   - Verify constraints, triggers, or foreign-key references work as expected.

> **Outcome**: Confidence that your data access layer is solid—you can read/write data without the UI in place.

---

## 5. **Prototype & Validate the Data Flow**
- **Proof of Concept**: If needed, do a quick test from an unstyled or minimal Next.js page (or even the command line) to confirm the endpoints are correct and you’re returning the data you expect.  
- **Check performance** (roughly) for your planned queries. If the joins or views are too slow, better to find out now than after building a final UI.

> **Outcome**: Assurance that the backend plumbing is stable and that you won’t have to tear down the UI later if something fundamental changes.

---

## 6. **Build the UI / Page Layout**
- **Create the basic page**:  
  - Plan the user interactions: where do they click to run queries, how do they filter data, where do they see results, etc.  
  - Start with the essential UI elements (displaying data, forms or buttons to edit/create).  
- **Integrate data fetching**:  
  - Hook up your SSR logic for the initial load (if relevant).  
  - Implement client-side updates or server actions for any dynamic interactions.  
- **Focus on core functionality first** (read, create, update, delete). Bells and whistles—like advanced theming or super fancy transitions—can come later.

> **Outcome**: A functional page that’s connected to your real data flows.

---

## 7. **Iterative Refinement**
1. **Add the “spreadsheet” feel** or advanced UI components (like your drag-and-drop query builder) if it’s part of the feature scope.  
2. **Polish**: Style the page, improve the layout, ensure the interactions feel natural to the user.  
3. **Feedback Loop**: If possible, show a quick demo to colleagues or potential end-users before finalizing. Adjust based on real input.

> **Outcome**: A more refined, user-friendly page that does what it’s supposed to and looks/feels right.

---

## 8. **Testing & QA**
- **Unit Tests / Integration Tests**:  
  - Test your server actions or API routes with automated tests if possible.  
  - Test the UI flows (e.g., create a record, update it, confirm the logs/triggers fired).  
- **Edge Cases**:  
  - Large data sets, missing/invalid inputs, concurrency issues if multiple users edit simultaneously, etc.

> **Outcome**: A robust feature that handles real-world usage gracefully.

---

## 9. **Finalize & Merge**
- **Document** the new feature briefly in your repo or internal wiki (e.g., “Here’s how to set up custom views” or “Here’s how the data flow works”).  
- **Open a Pull Request** to merge the feature branch. (If you’re using the kind of branch-creation or branch-limiting workflow you described, this is where you’d “close out” the feature branch by merging to your main branch if everything passes review.)

> **Outcome**: The feature is complete, integrated into the main product, and no longer needs the separate branch.

---

## 10. **Feedback & Next Steps**
- **User Feedback**: Once it’s in a staging or production environment, gather real feedback.  
  - Do they want more table coverage?  
  - Do they need custom views or more default views?  
  - Does the spreadsheet UI confuse them?  
- **Plan Enhancements**: Create new (smaller) issues/branches to address user requests or discovered bugs.

> **Outcome**: A continuous improvement cycle, hopefully with smaller, more focused tasks rather than a massive monolith.

---

# Summary

1. **Define** your new feature’s core purpose and scope (avoid scope bloat).  
2. **Plan** the data flow and confirm the database structure.  
3. **Build & test** the backend endpoints or server actions first.  
4. **Prototype** a minimal UI or simple calls to confirm correctness.  
5. **Develop** the actual UI (page, forms, dynamic interactions).  
6. **Refine** the UI and handle advanced features last.  
7. **Test** thoroughly, merge the branch, and **deploy**.  
8. **Gather feedback** and iterate as needed.

By following these steps in order, you ensure you don’t waste time on UI elements that might change or break if the data layer isn’t ready. You also avoid building out multiple tables or super-detailed flows before validating that the overall approach works for your users.