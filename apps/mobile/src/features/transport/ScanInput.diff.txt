diff --git a/apps/mobile/src/features/transport/ScanInput.tsx b/apps/mobile/src/features/transport/ScanInput.tsx
index 471d77b..2960da3 100644
--- a/apps/mobile/src/features/transport/ScanInput.tsx
+++ b/apps/mobile/src/features/transport/ScanInput.tsx
@@ -2,61 +2,32 @@ import { useRef, useEffect, useState } from "react";
 
 interface ScanInputProps {
   onScan: (barcode: string) => void;
+  isActive?: boolean; // Add a prop to control whether the input should maintain focus
 }
 
 /**
  * A hidden input element that captures barcode scans and passes them to the
  * `onScan` callback.
  *
- * This component automatically focuses the input element on mount and
- * re-focuses it whenever the window regains focus. It also attempts to prevent
- * the virtual keyboard from appearing on mobile devices.
+ * This component automatically focuses the input element when `isActive` is true
+ * and attempts to maintain focus. It uses direct input events (`onChange`, `onKeyDown`)
+ * to capture scans when active. It also includes a timeout fallback for devices
+ * that don't send an "Enter" key event.
  *
  * @prop {function} onScan - called with the scanned barcode string
+ * @prop {boolean} isActive - determines if the input should maintain focus (default: true)
  *
  * @example
- * <ScanInput onScan={barcode => console.log(barcode)} />
+ * <ScanInput onScan={barcode => console.log(barcode)} isActive={true} />
  */
-export function ScanInput({ onScan }: ScanInputProps) {
+export function ScanInput({ onScan, isActive = true }: ScanInputProps) {
   const inputRef = useRef<HTMLInputElement>(null);
   const [barcode, setBarcode] = useState("");
   const [isFocused, setIsFocused] = useState(false);
 
-  // Buffer and timing refs for global barcode scanner detection
-  const bufferRef = useRef<string>("");
-  const lastTimeRef = useRef<number>(0);
-
-  // Global keydown listener to capture keyboard-wedge barcode scanner input
-  useEffect(() => {
-    const handleGlobalKeyDown = (e: KeyboardEvent) => {
-      const now = Date.now();
-      // Reset buffer if pause between keys is too long
-      if (lastTimeRef.current && now - lastTimeRef.current > 100) {
-        bufferRef.current = "";
-      }
-      lastTimeRef.current = now;
-
-      // On Enter, treat buffer as full scan
-      if (e.key === "Enter") {
-        const code = bufferRef.current.trim();
-        bufferRef.current = "";
-        if (code.length >= 3) {
-          console.log("Global scan detected:", code);
-          onScan(code);
-        }
-      } else if (e.key.length === 1) {
-        // Append character to buffer
-        bufferRef.current += e.key;
-      }
-    };
-    window.addEventListener("keydown", handleGlobalKeyDown, true);
-    return () =>
-      window.removeEventListener("keydown", handleGlobalKeyDown, true);
-  }, [onScan]);
-
   // Auto-send the barcode after a delay of inactivity
   useEffect(() => {
-    if (!barcode.trim()) return;
+    if (!barcode.trim() || !isActive) return;
 
     const timeoutId = setTimeout(() => {
       if (barcode.trim().length >= 3) {
@@ -67,12 +38,15 @@ export function ScanInput({ onScan }: ScanInputProps) {
     }, 300); // 300ms delay
 
     return () => clearTimeout(timeoutId);
-  }, [barcode, onScan]);
+  }, [barcode, onScan, isActive]);
 
-  // Focus the input element on component mount
+  // Focus the input element on component mount and when isActive changes
   useEffect(() => {
+    console.log(`[ScanInput] isActive changed to: ${isActive}`);
+
     const focusInput = () => {
-      if (inputRef.current) {
+      if (inputRef.current && isActive) {
+        console.log(`[ScanInput] Focusing input element`);
         // Focus the input but don't show the keyboard on mobile
         inputRef.current.focus();
         setIsFocused(true);
@@ -84,73 +58,132 @@ export function ScanInput({ onScan }: ScanInputProps) {
             inputRef.current.removeAttribute("readonly");
           }
         }, 100);
+      } else if (
+        !isActive &&
+        inputRef.current &&
+        document.activeElement === inputRef.current
+      ) {
+        console.log(`[ScanInput] Blurring input element`);
+        inputRef.current.blur();
+        setIsFocused(false);
       }
     };
 
-    // Initial focus
-    focusInput();
-
-    // Re-focus the input when the window regains focus
-    const handleFocus = () => {
+    // Focus immediately when becoming active
+    if (isActive) {
       focusInput();
-    };
-
-    // Periodically check if input has lost focus and refocus if needed
-    const focusInterval = setInterval(() => {
-      if (inputRef.current && document.activeElement !== inputRef.current) {
-        console.log("ScanInput lost focus, refocusing...");
-        focusInput();
-      }
-    }, 1000);
 
-    window.addEventListener("focus", handleFocus);
-    document.addEventListener("click", handleFocus);
-    document.addEventListener("touchstart", handleFocus);
+      // Set up a focus interval for maintaining focus
+      const focusInterval = setInterval(() => {
+        if (
+          inputRef.current &&
+          document.activeElement !== inputRef.current &&
+          isActive
+        ) {
+          console.log("[ScanInput] Input lost focus, refocusing...");
+          focusInput();
+        }
+      }, 1000);
 
-    return () => {
-      window.removeEventListener("focus", handleFocus);
-      document.removeEventListener("click", handleFocus);
-      document.removeEventListener("touchstart", handleFocus);
-      clearInterval(focusInterval);
-    };
-  }, []);
+      // Set up event listeners to help maintain focus
+      const handleFocus = () => {
+        if (isActive) {
+          setTimeout(focusInput, 100);
+        }
+      };
+
+      window.addEventListener("focus", handleFocus);
+      document.addEventListener("click", handleFocus);
+      document.addEventListener("touchstart", handleFocus);
+
+      return () => {
+        window.removeEventListener("focus", handleFocus);
+        document.removeEventListener("click", handleFocus);
+        document.removeEventListener("touchstart", handleFocus);
+        clearInterval(focusInterval);
+      };
+    }
+  }, [isActive]);
 
   // Handle keypress events for barcode scanning
   const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
-    console.log("Key pressed:", e.key, "Current barcode:", barcode);
-
-    // If Enter key is pressed, process the barcode
-    if (e.key === "Enter" && barcode.trim()) {
-      console.log("Enter key pressed, processing barcode:", barcode);
-      onScan(barcode.trim());
-      setBarcode("");
-      e.preventDefault();
+    // Ignore if not active
+    if (!isActive) {
+      // console.log("[ScanInput] KeyDown ignored: Not active"); // Optional: Log inactive state
+      return;
+    }
+
+    console.log(
+      "[ScanInput] KeyDown event FIRED:",
+      e.key,
+      "Current value:",
+      inputRef.current?.value
+    );
+
+    // If Enter key is pressed, process the barcode stored in state
+    if (e.key === "Enter") {
+      e.preventDefault(); // Prevent form submission or other default actions
+      const currentBarcode = barcode.trim();
+      if (currentBarcode.length >= 3) {
+        console.log(
+          "[ScanInput] Enter key pressed, processing barcode:",
+          currentBarcode
+        );
+        onScan(currentBarcode);
+        setBarcode(""); // Clear the state after processing
+      } else {
+        console.log(
+          "[ScanInput] Enter key pressed, but barcode is too short:",
+          currentBarcode
+        );
+      }
     }
   };
 
-  // Capture input changes
+  // Capture input changes (typing, pasting)
   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    setBarcode(e.target.value);
-    console.log("Barcode input changed:", e.target.value);
-  };
+    // Ignore if not active
+    if (!isActive) {
+      // console.log("[ScanInput] Change ignored: Not active"); // Optional: Log inactive state
+      return;
+    }
 
-  // Handle focus and blur events
-  const handleFocus = () => {
-    setIsFocused(true);
-    console.log("ScanInput focused");
+    const newValue = e.target.value;
+    setBarcode(newValue);
+    console.log("[ScanInput] Input changed (handleChange) FIRED:", newValue);
   };
 
+  // Handle blur events - only refocus if still active
   const handleBlur = () => {
+    if (!isActive) return;
+
     setIsFocused(false);
-    console.log("ScanInput blurred, refocusing...");
-    // Refocus after a short delay
+    console.log("[ScanInput] Input blurred, waiting to refocus...");
+
+    // Refocus after a short delay only if still active
+    // Use a longer delay to avoid focus fighting with other elements
     setTimeout(() => {
-      if (inputRef.current) {
+      if (
+        inputRef.current &&
+        isActive &&
+        document.activeElement !== inputRef.current
+      ) {
+        console.log("[ScanInput] Refocusing after blur");
         inputRef.current.focus();
+        setIsFocused(true);
       }
-    }, 100);
+    }, 300);
   };
 
+  // Add a special effect to log when component mounts/unmounts
+  useEffect(() => {
+    console.log("[ScanInput] Component mounted");
+
+    return () => {
+      console.log("[ScanInput] Component unmounted");
+    };
+  }, []);
+
   return (
     <input
       ref={inputRef}
@@ -158,7 +191,13 @@ export function ScanInput({ onScan }: ScanInputProps) {
       value={barcode}
       onChange={handleChange}
       onKeyDown={handleKeyDown}
-      onFocus={handleFocus}
+      onFocus={() => {
+        if (isActive) {
+          // Only set focused state if supposed to be active
+          console.log("[ScanInput] Input focused directly");
+          setIsFocused(true);
+        }
+      }}
       onBlur={handleBlur}
       style={{
         position: "fixed", // Use fixed instead of absolute to ensure it stays in view
@@ -168,16 +207,18 @@ export function ScanInput({ onScan }: ScanInputProps) {
         height: 10, // Small but not zero height
         width: 10, // Small but not zero width
         zIndex: 9999, // Very high z-index
-        pointerEvents: "none", // Prevents it from intercepting touch events
+        pointerEvents: isActive ? "auto" : "none", // Prevents it from intercepting touch events when not active
       }}
       autoComplete="off"
       autoCorrect="off"
       autoCapitalize="off"
       spellCheck={false}
       inputMode="none"
-      autoFocus
+      autoFocus={isActive}
       aria-hidden="true"
+      aria-label="Barcode scanner input"
       data-testid="barcode-input"
+      disabled={!isActive}
     />
   );
 }
